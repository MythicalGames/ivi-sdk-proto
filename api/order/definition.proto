syntax = "proto3";

option java_multiple_files = true;
option java_package = "games.mythical.ivi.sdk.proto.api.order";

package api.order;

import "google/protobuf/struct.proto";
import "common/order/definition.proto";

// Order definitions
message Order {
  string order_id = 1;
  string player_id = 2;
  string tax = 3;
  string total = 4;
  string address = 6;
  google.protobuf.Struct metadata = 7;
  string request_ip = 8;
  PaymentProviderId payment_provider_id = 9;
  string item_types = 10;
  string payment_provider_order_data = 11;
  common.order.OrderState order_status = 12;
}

// Create order call
message Address {
  string first_name = 1;
  string last_name = 2;
  string address_line_1 = 3;
  string address_line_2 = 4;
  string city = 5;
  string state = 6;
  string postal_code = 7;
  string country_name = 8;
  string country_iso_alpha_2 = 9;
}

message PurchasedItem {
  string game_inventory_id = 1;
  string item_name = 2;
  string item_type_id = 3;
  string amount_paid = 4;
  string currency = 5;
  google.protobuf.Struct metadata = 6;
}

message CreateOrderRequest {
  string environment_id = 1;
  string marketplace_id = 2;
  string player_id = 3;
  string sub_total = 4;
  Address address = 5;
  PaymentProviderId payment_provider_id = 6;
  repeated PurchasedItem purchased_items = 7;
}

// Get order call
message GetOrderRequest {
  string environment_id = 1;
  string order_id = 2;
}

// finalize order
message FinalizeOrderRequest {
  string environment_id = 1;
  string order_id = 2;
  PaymentProviderProto payment_provider_data = 3;
}

message FinalizeOrderAsyncResponse {
  PaymentProviderProto payment_provider_data = 1;
}

// Payment definitions
enum PaymentProviderId {
  BRAINTREE = 0;
  BITPAY = 1;
}

message PaymentProviderProto {
  oneof provider {
    BraintreeProto braintree = 1;
    BitPayProto bitpay = 2;
  }
}

message BraintreeProto {
  string braintree_client_token = 1;
  string braintree_payment_nonce = 2;
}

message BitPayProto {
  string invoice_id = 1;
}

message BraintreeTokenPayload {
  string customer_id = 1;
}

message BitPayTokenPayload {
  string id = 1;
  string facade = 2;
  string label = 3;
  string pairing_code = 4;
}